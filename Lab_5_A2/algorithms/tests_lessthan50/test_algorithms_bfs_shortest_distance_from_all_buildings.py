# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.bfs.shortest_distance_from_all_buildings as module_0
import collections as module_1


def test_case_0():
    str_0 = "\\4V_m"
    var_0 = module_0.shortest_distance(str_0)
    assert var_0 == 0


def test_case_1():
    none_type_0 = None
    var_0 = module_0.shortest_distance(none_type_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.bfs(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_3():
    int_0 = -583
    var_0 = module_0.bfs(int_0, int_0, int_0, int_0, int_0)


def test_case_4():
    bytes_0 = b"\xf5\x19oaq\x1er\x05\x01\xecm\x8a>\x04\x94u\x92\x08\x90\x01"
    tuple_0 = (bytes_0,)
    var_0 = module_0.shortest_distance(tuple_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "\\"
    var_0 = module_0.shortest_distance(str_0)
    assert var_0 == 0
    var_1 = module_0.bfs(str_0, str_0, var_0, var_0, str_0)
    var_2 = str_0.__len__()
    var_1.format(*var_0, **var_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "a"
    var_0 = module_1.Counter(str_0)
    var_1 = module_0.shortest_distance(var_0)
    assert var_1 == -1
    module_0.bfs(str_0, var_1, var_0, var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xf5\x19oaqr\x05\x01\x00m\x8a>\x97\x94u\x08\xdd\x8c"
    tuple_0 = (bytes_0,)
    var_0 = module_0.shortest_distance(tuple_0)
    assert var_0 == 1
    module_0.shortest_distance(var_0)

# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.arrays.flatten as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "Bh!haBmYXm)NzFQbv]9"
    module_0.flatten(str_0, str_0)


def test_case_1():
    str_0 = ""
    var_0 = module_0.flatten(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"<\r|\xc2]@M\xfe\x84\x9aV\xb6F["
    var_0 = module_0.flatten_iter(bytes_0)
    list_0 = []
    var_1 = module_0.flatten_iter(list_0)
    var_2 = module_0.flatten(var_0)
    var_3 = module_0.flatten(bytes_0)
    module_0.flatten(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    var_0 = module_0.flatten_iter(list_0)
    var_1 = module_0.flatten_iter(list_0)
    var_2 = module_0.flatten(var_0, var_0)
    var_3 = module_0.flatten_iter(var_2)
    var_4 = module_0.flatten_iter(var_2)
    var_5 = module_0.flatten_iter(list_0)
    var_6 = module_0.flatten(var_0, var_2)
    var_7 = module_0.flatten_iter(var_2)
    none_type_0 = None
    var_8 = module_0.flatten_iter(none_type_0)
    module_0.flatten(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -3397
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.flatten(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xa9Y#a\x92\xa7\x12\x8cZd\xc9%\x19\x126\x8d\x9fr\x05"
    var_0 = module_0.flatten_iter(bytes_0)
    var_1 = module_0.flatten_iter(bytes_0)
    str_0 = "\n    A directed graph\n    "
    tuple_0 = (str_0, var_1)
    var_2 = module_0.flatten_iter(var_0)
    var_3 = module_0.flatten(tuple_0)
    var_4 = module_0.flatten_iter(var_1)
    bool_0 = False
    var_5 = module_0.flatten_iter(bytes_0)
    none_type_0 = None
    var_6 = module_0.flatten_iter(none_type_0)
    var_7 = module_0.flatten_iter(bool_0)
    var_8 = module_0.flatten(var_4)
    module_0.flatten(str_0, var_6)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "ai:*lTsQ6>[nqH+:Nb\x0b~"
    var_0 = module_0.flatten_iter(str_0)
    var_1 = module_0.flatten(str_0)
    tuple_0 = (str_0,)
    var_2 = module_0.flatten_iter(tuple_0)
    var_3 = module_0.flatten_iter(var_0)
    module_0.flatten(var_3, str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xa9Y#a\x92\xa7\x12\x8cZd\xc9%\x19\x126\x8d\x9fr\x05"
    var_0 = module_0.flatten(bytes_0)
    var_1 = module_0.flatten_iter(bytes_0)
    var_2 = module_0.flatten_iter(bytes_0)
    str_0 = "\n    A directed graph\n    "
    tuple_0 = (str_0, var_2)
    var_3 = module_0.flatten_iter(var_1)
    var_4 = module_0.flatten(tuple_0)
    var_5 = module_0.flatten_iter(var_2)
    bool_0 = False
    var_6 = module_0.flatten_iter(str_0)
    tuple_1 = (bytes_0, bool_0, bool_0)
    complex_0 = -2279.26 + 3876.1j
    var_7 = module_0.flatten_iter(bytes_0)
    none_type_0 = None
    var_8 = module_0.flatten_iter(none_type_0)
    var_9 = module_0.flatten_iter(bool_0)
    var_10 = module_0.flatten(var_5)
    var_11 = module_0.flatten_iter(none_type_0)
    tuple_2 = (tuple_1, complex_0, tuple_1)
    var_12 = module_0.flatten_iter(tuple_2)
    object_0 = module_1.object()
    set_0 = {tuple_2, tuple_1}
    var_13 = module_0.flatten_iter(set_0)
    var_14 = module_0.flatten(var_13)
    var_15 = module_0.flatten_iter(var_2)
    var_16 = module_0.flatten_iter(var_9)
    module_0.flatten(object_0, var_2)

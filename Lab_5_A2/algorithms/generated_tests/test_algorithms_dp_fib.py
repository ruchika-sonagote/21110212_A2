# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.dp.fib as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    var_0 = module_0.fib_recursive(bool_0)
    assert var_0 is True
    list_0 = [set_0, var_0, set_0]
    module_0.fib_recursive(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    var_0 = module_0.fib_list(bool_0)
    assert var_0 == 1
    list_0 = [set_0, var_0, set_0]
    module_0.fib_recursive(list_0)


def test_case_2():
    bool_0 = False
    var_0 = module_0.fib_list(bool_0)
    assert var_0 == 0
    var_1 = module_0.fib_iter(bool_0)
    assert var_1 is False
    int_0 = -1148
    with pytest.raises(AssertionError):
        module_0.fib_iter(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "E\\-/"
    module_0.fib_recursive(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 1309
    module_0.fib_recursive(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    var_0 = module_0.fib_iter(bool_0)
    assert var_0 is True
    var_1 = module_0.fib_list(bool_0)
    assert var_1 == 1
    var_2 = module_0.fib_recursive(bool_0)
    assert var_2 is True
    var_3 = module_0.fib_recursive(bool_0)
    var_4 = module_0.fib_recursive(var_1)
    var_5 = module_0.fib_iter(var_2)
    assert var_5 is True
    var_6 = module_0.fib_list(var_2)
    assert var_6 == 1
    var_7 = module_0.fib_iter(var_5)
    assert var_7 is True
    int_0 = 744
    var_8 = module_0.fib_recursive(var_5)
    assert var_8 is True
    var_9 = module_0.fib_recursive(var_2)
    var_10 = module_0.fib_list(int_0)
    assert (
        var_10
        == 137189016858942574813987960473276725913793500449015015431633921489426427977458850029545499585044983724193922911803790583217672598429809600464229122907959008
    )
    var_11 = module_0.fib_recursive(var_3)
    str_0 = " oaSWGvUILY"
    module_0.fib_recursive(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = 1.58
    module_0.fib_iter(float_0)


def test_case_7():
    float_0 = 1.6
    with pytest.raises(AssertionError):
        module_0.fib_recursive(float_0)


def test_case_8():
    bool_0 = False
    var_0 = module_0.fib_list(bool_0)
    assert var_0 == 0
    var_1 = module_0.fib_list(bool_0)
    assert var_1 == 0
    var_2 = module_0.fib_recursive(var_1)
    assert var_2 == 0
    var_3 = module_0.fib_list(var_1)
    assert var_3 == 0
    var_4 = module_0.fib_iter(var_3)
    assert var_4 == 0
    var_5 = module_0.fib_iter(var_0)
    assert var_5 == 0
    var_6 = module_0.fib_recursive(var_4)
    assert var_6 == 0
    var_7 = module_0.fib_recursive(var_5)
    assert var_7 == 0
    var_8 = module_0.fib_recursive(var_5)
    assert var_8 == 0
    var_9 = module_0.fib_iter(var_3)
    assert var_9 == 0
    var_10 = module_0.fib_iter(var_8)
    assert var_10 == 0
    var_11 = module_0.fib_list(var_0)
    assert var_11 == 0
    var_12 = module_0.fib_iter(var_3)
    assert var_12 == 0
    var_13 = module_0.fib_recursive(var_9)
    assert var_13 == 0
    var_14 = module_0.fib_recursive(var_6)
    assert var_14 == 0
    int_0 = -1010
    with pytest.raises(AssertionError):
        module_0.fib_list(int_0)


def test_case_9():
    bool_0 = False
    var_0 = module_0.fib_list(bool_0)
    assert var_0 == 0
    var_1 = module_0.fib_list(bool_0)
    assert var_1 == 0
    var_2 = module_0.fib_recursive(var_1)
    assert var_2 == 0
    var_3 = module_0.fib_list(var_1)
    assert var_3 == 0
    var_4 = module_0.fib_iter(var_3)
    assert var_4 == 0
    var_5 = module_0.fib_iter(var_0)
    assert var_5 == 0
    var_6 = module_0.fib_recursive(var_4)
    assert var_6 == 0
    var_7 = module_0.fib_recursive(var_5)
    assert var_7 == 0
    var_8 = module_0.fib_recursive(var_5)
    assert var_8 == 0
    var_9 = module_0.fib_iter(var_3)
    assert var_9 == 0
    var_10 = module_0.fib_iter(var_3)
    assert var_10 == 0
    var_11 = module_0.fib_list(var_4)
    assert var_11 == 0
    var_12 = module_0.fib_recursive(var_9)
    assert var_12 == 0
    var_13 = module_0.fib_list(var_2)
    assert var_13 == 0
    var_14 = module_0.fib_list(var_7)
    assert var_14 == 0
    var_15 = module_0.fib_list(var_4)
    assert var_15 == 0
    int_0 = 285
    var_16 = module_0.fib_list(var_5)
    assert var_16 == 0
    var_17 = module_0.fib_list(var_3)
    assert var_17 == 0
    var_18 = module_0.fib_iter(int_0)
    assert var_18 == 162926777992448823780908130212788963731840407743629812913410
    bool_1 = False
    var_19 = module_0.fib_iter(bool_1)
    assert var_19 is False
    object_0 = module_1.object()
    var_20 = module_0.fib_iter(bool_0)
    assert var_20 is False
    var_21 = module_0.fib_recursive(var_14)
    assert var_21 == 0
    var_22 = module_0.fib_list(var_7)
    assert var_22 == 0
    var_23 = module_0.fib_list(var_13)
    assert var_23 == 0
    var_24 = module_0.fib_list(var_13)
    assert var_24 == 0
    var_25 = module_0.fib_list(var_19)
    assert var_25 == 0
    var_26 = module_0.fib_list(var_6)
    assert var_26 == 0
    var_27 = module_0.fib_list(var_16)
    assert var_27 == 0
    var_28 = module_0.fib_iter(var_20)
    assert var_28 is False
    var_29 = module_0.fib_list(var_13)
    assert var_29 == 0
    var_30 = module_0.fib_list(var_7)
    assert var_30 == 0

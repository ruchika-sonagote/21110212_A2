# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.compression.huffman_coding as module_0
import heapq as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    huffman_reader_0 = module_0.HuffmanReader(bool_0)
    huffman_reader_0.load_tree()


def test_case_1():
    tuple_0 = ()
    huffman_writer_0 = module_0.HuffmanWriter(tuple_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    var_0 = huffman_writer_0.close()


def test_case_2():
    bool_0 = True
    tree_finder_0 = module_0.TreeFinder(bool_0)
    complex_0 = 2113 - 2543.4j
    set_0 = {complex_0, tree_finder_0, complex_0}
    var_0 = tree_finder_0.find(set_0)
    assert var_0 is True
    assert tree_finder_0.found == ""


def test_case_3():
    huffman_coding_0 = module_0.HuffmanCoding()


def test_case_4():
    node_0 = module_0.Node()
    assert node_0.frequency == 0


@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_1.merge()
    var_1 = var_0.close()
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    node_0 = module_0.Node()
    assert node_0.frequency == 0
    node_0.__lt__(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_0.__eq__(none_type_0)


def test_case_7():
    bytes_0 = b"\xe8\xe8}@\xbb\xa7,Y$T\xbf"
    huffman_reader_0 = module_0.HuffmanReader(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    huffman_reader_0 = module_0.HuffmanReader(none_type_0)
    huffman_reader_0.get_number_of_additional_bits_in_the_last_byte()


def test_case_9():
    bool_0 = True
    tuple_0 = (bool_0,)
    huffman_writer_0 = module_0.HuffmanWriter(tuple_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = (
        "<algorithms.compression.huffman_coding.TreeFinder object at 0x75a6b2722860>"
    )
    huffman_writer_0 = module_0.HuffmanWriter(str_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    huffman_writer_1 = module_0.HuffmanWriter(huffman_writer_0)
    assert huffman_writer_1.buffer == ""
    assert huffman_writer_1.saved_bits == 0
    str_1 = "1g3*"
    tree_finder_0 = module_0.TreeFinder(str_1)
    var_0 = tree_finder_0.find(str_1)
    assert var_0 is True
    assert tree_finder_0.found == ""
    bytes_0 = b"\xa0d\x0e;M\xe0\xb4o\x96\xfdPj\x00\x86"
    node_0 = module_0.Node(var_0, bytes_0)
    huffman_writer_1.write_char(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    huffman_writer_0 = module_0.HuffmanWriter(bool_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    huffman_writer_0.write_int(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    tree_finder_0 = module_0.TreeFinder(bool_0)
    huffman_reader_0 = module_0.HuffmanReader(bool_0)
    huffman_reader_0.load_tree()


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "r"
    tree_finder_0 = module_0.TreeFinder(str_0)
    huffman_reader_0 = module_0.HuffmanReader(tree_finder_0)
    float_0 = -427.8164858317035
    huffman_reader_0.get_bit(float_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    node_0 = module_0.Node()
    assert node_0.frequency == 0
    var_0 = node_0.__repr__()
    assert var_0 == "<ch: None: 0>"
    tree_finder_0 = module_0.TreeFinder(var_0)
    assert tree_finder_0.root == "<ch: None: 0>"
    assert tree_finder_0.current_node == "<ch: None: 0>"
    var_1 = tree_finder_0.find(var_0)
    assert var_1 is True
    assert tree_finder_0.found == ""
    var_2 = tree_finder_0.find(var_1)
    huffman_reader_0 = module_0.HuffmanReader(var_1)
    float_0 = -426.5984649777195
    huffman_reader_0.get_bit(float_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    node_0 = module_0.Node()
    assert node_0.frequency == 0
    var_0 = node_0.__str__()
    assert var_0 == "<ch: None: 0>"
    tree_finder_0 = module_0.TreeFinder(var_0)
    assert tree_finder_0.root == "<ch: None: 0>"
    assert tree_finder_0.current_node == "<ch: None: 0>"
    var_1 = tree_finder_0.find(var_0)
    assert var_1 is True
    assert tree_finder_0.found == ""
    var_2 = tree_finder_0.find(var_1)
    huffman_reader_0 = module_0.HuffmanReader(var_1)
    float_0 = -426.5984649777195
    huffman_reader_0.get_bit(float_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    node_0 = module_0.Node()
    assert node_0.frequency == 0
    str_0 = (
        "<algorithms.compression.huffman_coding.TreeFinder object at 0x75a6b2722860>"
    )
    huffman_writer_0 = module_0.HuffmanWriter(str_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    tree_finder_0 = module_0.TreeFinder(str_0)
    var_0 = str_0.__gt__(str_0)
    var_1 = tree_finder_0.find(str_0)
    assert var_1 is True
    assert tree_finder_0.found == ""
    var_2 = node_0.__gt__(node_0)
    assert var_2 is False
    var_3 = var_0.__repr__()
    str_1 = "1"
    var_4 = var_3.__str__()
    var_5 = huffman_writer_0.write_bits(str_1)
    assert huffman_writer_0.buffer == "1"
    assert huffman_writer_0.saved_bits == 1
    var_6 = huffman_writer_0.write_bits(str_1)
    assert huffman_writer_0.buffer == "11"
    assert huffman_writer_0.saved_bits == 2
    var_7 = huffman_writer_0.write_bits(var_3)
    assert huffman_writer_0.buffer == "11False"
    assert huffman_writer_0.saved_bits == 7
    var_8 = huffman_writer_0.__eq__(var_0)
    tree_finder_1 = module_0.TreeFinder(str_0)
    tree_finder_1.find(str_1)


@pytest.mark.xfail(strict=True)
def test_case_17():
    huffman_coding_0 = module_0.HuffmanCoding()
    bool_0 = True
    huffman_reader_0 = module_0.HuffmanReader(bool_0)
    tree_finder_0 = module_0.TreeFinder(bool_0)
    none_type_0 = None
    huffman_coding_0.encode_file(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = (
        "<algorithms.compression.huffman_coding.TreeFinder object at 0x75a6b2722860>"
    )
    huffman_writer_0 = module_0.HuffmanWriter(str_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    var_0 = huffman_writer_0.close()
    var_1 = var_0.__repr__()
    var_2 = huffman_writer_0.write_bits(var_1)
    assert huffman_writer_0.buffer == "None"
    assert huffman_writer_0.saved_bits == 4
    huffman_writer_0.close()


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = "<algorithms.compression.huffman_coding.TreeFnder object at 075a6b2722r60>"
    huffman_writer_0 = module_0.HuffmanWriter(str_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    tree_finder_0 = module_0.TreeFinder(str_0)
    var_0 = tree_finder_0.find(huffman_writer_0)
    assert var_0 is True
    assert tree_finder_0.found == ""
    node_0 = module_0.Node(var_0, var_0)
    huffman_writer_0.save_tree(node_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = (
        "<algorithms.compression.huffman_coding.TreeFinder object at 0x75a6b2722860>"
    )
    huffman_writer_0 = module_0.HuffmanWriter(str_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    var_0 = huffman_writer_0.close()
    huffman_writer_1 = module_0.HuffmanWriter(var_0)
    assert huffman_writer_1.saved_bits == 0
    tree_finder_0 = module_0.TreeFinder(var_0)
    bytes_0 = b"-0\x10\x0b\xd0G\x8e/\x85\x87\xb6\xbf\x15\x91\x0fh\xbc"
    node_0 = module_0.Node(bytes_0, var_0)
    var_1 = huffman_writer_1.save_tree(node_0)
    assert huffman_writer_1.buffer == "1"
    assert huffman_writer_1.saved_bits == 1
    tree_finder_1 = module_0.TreeFinder(tree_finder_0)
    huffman_coding_0 = module_0.HuffmanCoding()
    huffman_coding_0.encode_file(var_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = (
        "<algorithms.compression.huffman_coding.TreeFinder object at 0x75a6b2722860>"
    )
    huffman_writer_0 = module_0.HuffmanWriter(str_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    var_0 = huffman_writer_0.close()
    huffman_writer_1 = module_0.HuffmanWriter(var_0)
    assert huffman_writer_1.saved_bits == 0
    huffman_writer_2 = module_0.HuffmanWriter(huffman_writer_0)
    assert huffman_writer_2.saved_bits == 0
    tree_finder_0 = module_0.TreeFinder(huffman_writer_1)
    var_1 = tree_finder_0.find(tree_finder_0)
    assert var_1 is True
    assert tree_finder_0.found == ""
    node_0 = module_0.Node(huffman_writer_0, left=huffman_writer_1, right=str_0)
    huffman_writer_0.save_tree(node_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = (
        "<algorithms.compression.huffman_coding.TreeFinder object at 0x75a6b2722860>"
    )
    huffman_writer_0 = module_0.HuffmanWriter(str_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    var_0 = huffman_writer_0.close()
    tree_finder_0 = module_0.TreeFinder(var_0)
    var_1 = str_0.find(str_0)
    huffman_reader_0 = module_0.HuffmanReader(var_1)
    var_2 = var_1.__repr__()
    tree_finder_0.find(var_2)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "Vux!@V\r2u"
    huffman_writer_0 = module_0.HuffmanWriter(str_0)
    assert huffman_writer_0.buffer == ""
    assert huffman_writer_0.saved_bits == 0
    huffman_writer_1 = module_0.HuffmanWriter(str_0)
    assert huffman_writer_1.buffer == ""
    assert huffman_writer_1.saved_bits == 0
    tree_finder_0 = module_0.TreeFinder(huffman_writer_0)
    var_0 = huffman_writer_0.close()
    node_0 = module_0.Node(huffman_writer_1, str_0, right=str_0)
    var_1 = tree_finder_0.find(str_0)
    assert var_1 is True
    assert tree_finder_0.found == ""
    huffman_writer_1.save_tree(node_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = "]#EaBS"
    tree_finder_0 = module_0.TreeFinder(str_0)
    str_1 = "1"
    var_0 = tree_finder_0.find(str_0)
    assert var_0 is True
    assert tree_finder_0.found == ""
    tree_finder_1 = module_0.TreeFinder(str_0)
    tree_finder_1.find(str_1)

# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.backtrack.combination_sum as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    module_0.combination_sum(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = -2.91642
    list_0 = [float_0]
    bool_0 = True
    module_0.combination_sum(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 975
    list_0 = [int_0, int_0, int_0]
    var_0 = module_0.combination_sum(list_0, int_0)
    str_0 = "\nGiven a stack, a function remove_min accepts a stack as a parameter\nand removes the smallest value from the stack.\n\nFor example:\nbottom [2, 8, 3, -6, 7, 3] top\nAfter remove_min(stack):\nbottom [2, 8, 3, 7, 3] top\n\n"
    list_1 = [str_0, str_0, str_0, str_0]
    bytes_0 = b"\xf0\xf3\x9e3&["
    tuple_0 = (list_1, bytes_0)
    module_0.combination_sum(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -2.91642
    list_0 = [float_0]
    bool_0 = True
    var_0 = module_0.combination_sum(list_0, float_0)
    module_0.combination_sum(list_0, bool_0)

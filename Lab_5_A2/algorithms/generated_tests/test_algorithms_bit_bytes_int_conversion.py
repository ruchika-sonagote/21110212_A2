# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.bit.bytes_int_conversion as module_0


def test_case_0():
    bool_0 = True
    var_0 = module_0.int_to_bytes_big_endian(bool_0)
    assert var_0 == b"\x01"


def test_case_1():
    int_0 = -3511
    var_0 = module_0.int_to_bytes_big_endian(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    var_0 = module_0.int_to_bytes_little_endian(bool_0)
    assert var_0 == b"\x01"
    int_0 = -3511
    bool_1 = False
    var_1 = module_0.int_to_bytes_big_endian(bool_1)
    module_0.bytes_big_endian_to_int(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ""
    var_0 = module_0.bytes_big_endian_to_int(str_0)
    assert var_0 == 0
    var_1 = module_0.int_to_bytes_big_endian(var_0)
    assert var_1 == b""
    var_2 = module_0.int_to_bytes_little_endian(var_0)
    assert var_2 == b""
    var_3 = module_0.int_to_bytes_big_endian(var_0)
    assert var_3 == b""
    var_4 = module_0.bytes_big_endian_to_int(var_3)
    assert var_4 == 0
    var_5 = module_0.bytes_little_endian_to_int(var_2)
    assert var_5 == 0
    var_6 = module_0.bytes_big_endian_to_int(var_2)
    assert var_6 == 0
    module_0.int_to_bytes_little_endian(var_3)


def test_case_4():
    bool_0 = False
    list_0 = [bool_0]
    var_0 = module_0.bytes_big_endian_to_int(list_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x85n\xce\xc5mg\x03e1P\x88"
    var_0 = module_0.bytes_little_endian_to_int(bytes_0)
    assert var_0 == 164792611955453895073754757
    bool_0 = False
    var_1 = module_0.int_to_bytes_big_endian(bool_0)
    var_2 = module_0.bytes_big_endian_to_int(var_1)
    assert var_2 == 0
    module_0.bytes_big_endian_to_int(bool_0)


def test_case_6():
    str_0 = ""
    var_0 = module_0.bytes_big_endian_to_int(str_0)
    assert var_0 == 0
    var_1 = module_0.int_to_bytes_big_endian(var_0)
    assert var_1 == b""
    var_2 = module_0.bytes_little_endian_to_int(var_1)
    assert var_2 == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    module_0.bytes_big_endian_to_int(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xf5\x83u\xc6^\xf4\x8ek"
    var_0 = module_0.bytes_big_endian_to_int(bytes_0)
    assert var_0 == 17691113256098500203
    var_1 = module_0.bytes_big_endian_to_int(bytes_0)
    assert var_1 == 17691113256098500203
    var_2 = module_0.int_to_bytes_little_endian(var_0)
    assert var_2 == b"k\x8e\xf4^\xc6u\x83\xf5"
    var_3 = module_0.bytes_big_endian_to_int(bytes_0)
    assert var_3 == 17691113256098500203
    module_0.int_to_bytes_little_endian(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = ""
    var_0 = module_0.bytes_big_endian_to_int(str_0)
    assert var_0 == 0
    int_0 = 1031
    var_1 = module_0.int_to_bytes_big_endian(int_0)
    assert var_1 == b"\x04\x07"
    module_0.int_to_bytes_big_endian(var_1)

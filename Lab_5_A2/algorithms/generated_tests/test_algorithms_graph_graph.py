# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.graph.graph as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = " above, below, or right on? "
    bool_0 = True
    directed_graph_0 = module_0.DirectedGraph()
    var_0 = directed_graph_0.add_edge(bool_0, str_0)
    var_1 = var_0.__eq__(str_0)
    var_2 = var_0.__eq__(str_0)
    var_3 = var_2.__ne__(bool_0)
    node_0 = module_0.Node(bool_0)
    var_4 = var_1.__le__(node_0)
    var_5 = node_0.__eq__(node_0)
    assert var_5 is True
    node_0.__gt__(bool_0)


def test_case_1():
    directed_graph_0 = module_0.DirectedGraph()
    var_0 = directed_graph_0.add_node(directed_graph_0)
    assert len(directed_graph_0.nodes) == 1
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "algorithms.graph.graph.Node"
    )
    assert (
        f"{type(var_0.name).__module__}.{type(var_0.name).__qualname__}"
        == "algorithms.graph.graph.DirectedGraph"
    )
    var_1 = directed_graph_0.add_edge(directed_graph_0, var_0)


def test_case_2():
    none_type_0 = None
    directed_edge_0 = module_0.DirectedEdge(none_type_0, none_type_0)
    var_0 = directed_edge_0.__repr__()
    assert var_0 == "(None -> None)"
    directed_edge_1 = module_0.DirectedEdge(var_0, var_0)
    assert directed_edge_1.source == "(None -> None)"
    assert directed_edge_1.target == "(None -> None)"
    var_1 = directed_edge_1.__eq__(directed_edge_0)
    str_0 = ">|{OVj\x0cc0?Vt"
    node_0 = module_0.Node(str_0)


def test_case_3():
    none_type_0 = None
    directed_edge_0 = module_0.DirectedEdge(none_type_0, none_type_0)
    int_0 = 2579
    var_0 = directed_edge_0.__eq__(int_0)
    assert var_0 is False
    var_1 = var_0.__eq__(none_type_0)
    var_2 = var_1.__hash__()
    var_3 = var_2.__bool__()


def test_case_4():
    directed_graph_0 = module_0.DirectedGraph()
    directed_graph_1 = module_0.DirectedGraph(directed_graph_0)
    assert (
        f"{type(directed_graph_1).__module__}.{type(directed_graph_1).__qualname__}"
        == "algorithms.graph.graph.DirectedGraph"
    )
    assert directed_graph_1.nodes == []
    assert directed_graph_1.edges == []
    assert directed_graph_1.adjacency_list == {}


def test_case_5():
    directed_graph_0 = module_0.DirectedGraph()
    var_0 = directed_graph_0.add_node(directed_graph_0)
    assert len(directed_graph_0.nodes) == 1
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "algorithms.graph.graph.Node"
    )
    assert (
        f"{type(var_0.name).__module__}.{type(var_0.name).__qualname__}"
        == "algorithms.graph.graph.DirectedGraph"
    )


def test_case_6():
    directed_graph_0 = module_0.DirectedGraph()
    directed_graph_1 = directed_graph_0.add_edge(directed_graph_0, directed_graph_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    directed_graph_0 = module_0.DirectedGraph()
    var_3 = directed_graph_0.add_node(none_type_0)
    assert len(directed_graph_0.nodes) == 1
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.graph.graph.Node"
    )
    assert var_3.name is None
    bytes_0 = b""
    node_0.__lt__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.DirectedGraph(dict_0)


def test_case_9():
    bytes_0 = b"\x86\xb4\x08,%\x99&u"
    none_type_0 = None
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__ne__(bytes_0)
    assert var_0 is True
    var_1 = var_0.__le__(bytes_0)
    var_2 = var_1.__hash__()
    var_3 = var_2.__ne__(none_type_0)
    var_4 = var_3.__eq__(bytes_0)
    var_5 = var_4.__hash__()


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = node_0.__repr__()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    directed_graph_0 = module_0.DirectedGraph()
    var_3 = directed_graph_0.add_node(none_type_0)
    assert len(directed_graph_0.nodes) == 1
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.graph.graph.Node"
    )
    assert var_3.name is None
    var_4 = var_0.__bool__()
    var_3.__le__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    complex_0 = 882.729 + 893j
    directed_edge_0 = module_0.DirectedEdge(complex_0, complex_0)
    node_0 = module_0.Node(complex_0)
    none_type_0 = None
    node_0.__gt__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    directed_edge_0 = module_0.DirectedEdge(none_type_0, none_type_0)
    none_type_1 = None
    var_0 = directed_edge_0.__repr__()
    assert var_0 == "(None -> None)"
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    node_0.__ge__(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    tuple_0 = ()
    bytes_0 = b""
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    var_0 = node_0.__bool__()
    var_1 = var_0.__le__(bytes_0)
    var_2 = var_1.__bool__()
    var_2.get_name(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "IS#V}?"
    node_0 = module_0.Node(str_0)
    var_0 = node_0.__ne__(str_0)
    assert var_0 is False
    var_1 = node_0.__hash__()
    var_1.add_edge(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "g#db*>Z\t5YSz|\rR]j"
    directed_edge_0 = module_0.DirectedEdge(str_0, str_0)
    var_0 = directed_edge_0.__eq__(directed_edge_0)
    assert var_0 is True
    var_1 = var_0.__ge__(str_0)
    var_2 = var_1.__hash__()
    var_3 = var_2.__repr__()
    var_4 = directed_edge_0.__eq__(var_3)
    assert var_4 is False
    var_5 = var_2.__ge__(str_0)
    var_5.add_node(str_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    directed_graph_0 = module_0.DirectedGraph()
    none_type_0 = None
    var_0 = directed_graph_0.add_edge(none_type_0, directed_graph_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    float_0 = -2144.532789
    var_1 = directed_graph_0.add_edge(directed_graph_0, float_0)
    directed_graph_1 = module_0.DirectedGraph(var_1)
    assert (
        f"{type(directed_graph_1).__module__}.{type(directed_graph_1).__qualname__}"
        == "algorithms.graph.graph.DirectedGraph"
    )
    assert directed_graph_1.nodes == []
    assert directed_graph_1.edges == []
    assert directed_graph_1.adjacency_list == {}
    var_2 = directed_graph_0.add_node(directed_graph_0)
    assert len(directed_graph_0.nodes) == 1
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "algorithms.graph.graph.Node"
    )
    assert (
        f"{type(var_2.name).__module__}.{type(var_2.name).__qualname__}"
        == "algorithms.graph.graph.DirectedGraph"
    )
    var_3 = var_2.get_name(var_1)
    assert var_3 == ""
    var_4 = var_3.__eq__(var_2)
    var_5 = var_1.__ne__(var_4)
    var_6 = var_2.__hash__()
    directed_edge_0 = module_0.DirectedEdge(var_5, var_4)
    var_7 = directed_graph_1.add_node(var_1)
    var_8 = directed_graph_0.add_node(directed_edge_0)
    assert len(directed_graph_0.nodes) == 2
    assert (
        f"{type(var_8.name).__module__}.{type(var_8.name).__qualname__}"
        == "algorithms.graph.graph.DirectedEdge"
    )
    var_9 = var_3.__repr__()
    assert var_9 == "''"
    directed_graph_2 = module_0.DirectedGraph()
    var_10 = var_9.__hash__()
    assert var_10 == 884514731295398798
    var_11 = var_10.__eq__(var_1)
    var_12 = var_3.__hash__()
    assert var_12 == 0
    var_13 = directed_graph_0.add_node(var_12)
    assert len(directed_graph_0.nodes) == 3
    assert (
        f"{type(var_13).__module__}.{type(var_13).__qualname__}"
        == "algorithms.graph.graph.Node"
    )
    assert var_13.name == 0
    dict_0 = {var_7: var_3, var_10: directed_graph_1, var_3: var_8}
    module_0.DirectedGraph(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    directed_graph_0 = module_0.DirectedGraph()
    float_0 = -2144.532789
    var_0 = directed_graph_0.add_edge(directed_graph_0, float_0)
    var_1 = directed_graph_0.add_node(directed_graph_0)
    assert len(directed_graph_0.nodes) == 1
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.graph.graph.Node"
    )
    assert (
        f"{type(var_1.name).__module__}.{type(var_1.name).__qualname__}"
        == "algorithms.graph.graph.DirectedGraph"
    )
    var_2 = var_1.get_name(var_0)
    assert var_2 == ""
    var_3 = var_2.__eq__(var_1)
    var_4 = var_0.__ne__(var_3)
    var_5 = var_1.__hash__()
    directed_edge_0 = module_0.DirectedEdge(var_4, var_3)
    var_6 = directed_graph_0.add_node(var_0)
    assert len(directed_graph_0.nodes) == 2
    assert var_6.name is None
    var_7 = directed_graph_0.add_node(directed_edge_0)
    assert len(directed_graph_0.nodes) == 3
    assert (
        f"{type(var_7.name).__module__}.{type(var_7.name).__qualname__}"
        == "algorithms.graph.graph.DirectedEdge"
    )
    var_8 = var_2.__repr__()
    assert var_8 == "''"
    var_9 = var_8.__hash__()
    assert var_9 == 884514731295398798
    var_10 = var_9.__eq__(var_0)
    var_11 = directed_graph_0.add_node(var_3)
    assert len(directed_graph_0.nodes) == 4
    assert (
        f"{type(var_11).__module__}.{type(var_11).__qualname__}"
        == "algorithms.graph.graph.Node"
    )
    assert (
        f"{type(var_11.name).__module__}.{type(var_11.name).__qualname__}"
        == "builtins.NotImplementedType"
    )
    dict_0 = {var_6: var_2, var_9: var_8, var_2: var_7}
    module_0.DirectedGraph(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    directed_graph_0 = module_0.DirectedGraph()
    float_0 = -2144.532789
    var_0 = directed_graph_0.add_edge(directed_graph_0, float_0)
    var_1 = directed_graph_0.add_node(directed_graph_0)
    assert len(directed_graph_0.nodes) == 1
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.graph.graph.Node"
    )
    assert (
        f"{type(var_1.name).__module__}.{type(var_1.name).__qualname__}"
        == "algorithms.graph.graph.DirectedGraph"
    )
    var_2 = var_1.get_name(var_0)
    assert var_2 == ""
    var_3 = var_2.__eq__(var_1)
    var_4 = var_0.__ne__(var_3)
    var_5 = var_2.__eq__(var_1)
    directed_edge_0 = module_0.DirectedEdge(var_4, var_3)
    var_6 = directed_graph_0.add_node(var_0)
    assert len(directed_graph_0.nodes) == 2
    assert var_6.name is None
    var_7 = var_3.__repr__()
    var_8 = var_2.__repr__()
    assert var_8 == "''"
    var_9 = var_8.__hash__()
    assert var_9 == 884514731295398798
    var_10 = var_9.__eq__(var_0)
    var_11 = directed_graph_0.add_node(var_3)
    assert len(directed_graph_0.nodes) == 3
    assert (
        f"{type(var_11.name).__module__}.{type(var_11.name).__qualname__}"
        == "builtins.NotImplementedType"
    )
    dict_0 = {var_6: var_2, var_9: var_8, var_2: var_7}
    directed_graph_1 = module_0.DirectedGraph(dict_0)
    assert len(directed_graph_1.nodes) == 14
    assert len(directed_graph_1.edges) == 14
    assert len(directed_graph_1.adjacency_list) == 3
    var_7.get_name(var_7)

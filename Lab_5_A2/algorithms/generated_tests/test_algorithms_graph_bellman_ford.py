# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.graph.bellman_ford as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "u^[U8"
    module_0.bellman_ford(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "\nIn mathematics, the Fibonacci numbers, commonly denoted Fn,\nform a sequence, called the Fibonacci sequence,\nsuch that each number is the sum of the two preceding ones,\nstarting from 0 and 1.\nThat is,\n    F0=0 , F1=1\nand\n    Fn= F(n-1) + F(n-2)\nThe Fibonacci numbers are the numbers in the following integer sequence.\n    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …….\n\nIn mathematical terms, the sequence Fn of Fibonacci numbers is\ndefined by the recurrence relation\n\nHere, given a number n, print n-th Fibonacci Number.\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.bellman_ford(dict_0, str_0)


def test_case_2():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.bellman_ford(dict_0, str_0)
    assert var_0 is True


def test_case_3():
    str_0 = "\nIn mathematics, the Fibonacci numbers, commonly denoted Fn,\nform a sequence, called the Fibonacci sequence,\nsuch that each number is the sum of the two preceding ones,\nstarting from 0 and 1.\nThat is,\n    F0=0 , F1=1\nand\n    Fn= F(n-1) + F(n-2)\nThe Fibonacci numbers are the numbers in the following integer sequence.\n    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …….\n\nIn mathematical terms, the sequence Fn of Fibonacci numbers is\ndefined by the recurrence relation\n\nHere, given a number n, print n-th Fibonacci Number.\n"
    str_1 = ""
    dict_0 = {str_0: str_1, str_1: str_1, str_0: str_1}
    var_0 = module_0.bellman_ford(dict_0, str_1)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "\nIn mathematics, the Fibonacci numbers, commonly denoted Fn,\nform a sequence, called the Fibonacci sequence,\nsuch that each number is the sum of the two preceding ones,\nstarting from 0 and 1.\nThat is,\n    F0=0 , F1=1\nand\n    Fn= F(n-1) + F(n-2)\nThe Fibonacci numbers are the numbers in the following integer sequence.\n    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …….\n\nIn mathematical terms, the sequence Fn of Fibonacci numbers is\ndefined by the recurrence relation\n\nHere, given a number n, print n-th Fibonacci Number.\n"
    str_1 = "Y>Y4'5rJX83"
    dict_0 = {str_0: str_1, str_1: str_1, str_0: str_1}
    module_0.bellman_ford(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    bool_1 = False
    int_0 = -2036
    list_0 = [int_0, int_0, bool_0, int_0]
    int_1 = 1340
    bool_2 = False
    set_0 = {int_1, int_0}
    dict_0 = {bool_1: list_0, int_1: list_0, bool_2: set_0}
    tuple_0 = (bool_1, int_0, list_0, dict_0)
    dict_1 = {bool_0: bool_0, bool_0: tuple_0, int_0: bool_2}
    module_0.bellman_ford(dict_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    bool_1 = True
    int_0 = -2036
    list_0 = [int_0, int_0, bool_0, int_0]
    int_1 = 1340
    bool_2 = False
    set_0 = {int_1, int_0}
    dict_0 = {bool_1: list_0, int_1: list_0, bool_2: set_0}
    tuple_0 = (bool_1, int_0, list_0, dict_0)
    dict_1 = {bool_0: bool_0, bool_0: tuple_0, int_0: bool_2}
    module_0.bellman_ford(dict_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    bool_1 = True
    int_0 = -2036
    list_0 = [int_0, int_0, bool_0, int_0]
    int_1 = 1377
    bool_2 = False
    set_0 = {int_1, int_0}
    dict_0 = {bool_1: list_0, int_1: list_0, bool_2: set_0}
    tuple_0 = (bool_1, int_0, list_0, dict_0)
    dict_1 = {bool_0: tuple_0}
    var_0 = module_0.bellman_ford(dict_1, bool_1)
    assert var_0 is False
    complex_0 = 2j
    module_0.bellman_ford(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    bool_1 = False
    int_0 = -2036
    list_0 = [int_0, int_0, bool_0, int_0]
    int_1 = 1377
    bool_2 = False
    set_0 = {int_1, int_0}
    dict_0 = {bool_1: list_0, int_1: list_0, bool_2: set_0}
    tuple_0 = (bool_1, int_0, list_0, dict_0)
    dict_1 = {bool_0: tuple_0}
    module_0.bellman_ford(dict_1, bool_1)

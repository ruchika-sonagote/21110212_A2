# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.bit.power_of_two as module_0


def test_case_0():
    bool_0 = True
    var_0 = module_0.is_power_of_two(bool_0)
    assert var_0 is True
    var_1 = module_0.is_power_of_two(bool_0)
    assert var_1 is True
    var_2 = module_0.is_power_of_two(bool_0)
    assert var_2 is True
    var_3 = module_0.is_power_of_two(var_1)
    assert var_3 is True
    var_4 = module_0.is_power_of_two(bool_0)
    assert var_4 is True
    var_5 = module_0.is_power_of_two(bool_0)
    assert var_5 is True
    var_6 = module_0.is_power_of_two(var_2)
    assert var_6 is True
    var_7 = module_0.is_power_of_two(var_3)
    assert var_7 is True
    var_8 = module_0.is_power_of_two(var_0)
    assert var_8 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -1903
    var_0 = module_0.is_power_of_two(int_0)
    none_type_0 = None
    module_0.is_power_of_two(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "\x0cMY{k"
    module_0.is_power_of_two(str_0)

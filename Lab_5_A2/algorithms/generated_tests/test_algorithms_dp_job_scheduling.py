# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.dp.job_scheduling as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.binary_search(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.binary_search(bool_0, bool_0)
    assert var_0 == -1
    job_0 = module_0.Job(bool_0, bool_0, bool_0)
    list_0 = [
        job_0,
        job_0,
        job_0,
        job_0,
        job_0,
        job_0,
        job_0,
        job_0,
        job_0,
        job_0,
        job_0,
        job_0,
        job_0,
        job_0,
    ]
    var_1 = module_0.schedule(list_0)
    assert var_1 is False


def test_case_2():
    bool_0 = True
    job_0 = module_0.Job(bool_0, bool_0, bool_0)
    list_0 = [job_0, job_0]
    var_0 = module_0.schedule(list_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "3\x0bSfcDyVryvZK-!dp"
    module_0.schedule(str_0)


def test_case_4():
    str_0 = "\n        Get the set of all variables\n        present in the monomial.\n        "
    str_1 = "p6'X]DvIp3_>Gt\""
    job_0 = module_0.Job(str_0, str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    complex_0 = 1489.876652820193 + 3435.58883j
    bool_1 = False
    job_0 = module_0.Job(bool_1, bool_0, complex_0)
    list_0 = [job_0, job_0]
    module_0.schedule(list_0)


def test_case_6():
    bool_0 = True
    job_0 = module_0.Job(bool_0, bool_0, bool_0)
    list_0 = [job_0, job_0, job_0]
    var_0 = module_0.schedule(list_0)
    assert var_0 is True

# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import collections as module_0
import algorithms.bfs.maze_search as module_1


def test_case_0():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    deque_0 = module_0.deque()
    list_0 = []
    tuple_0 = (dict_0, deque_0, list_0)
    var_0 = module_1.maze_search(tuple_0)
    assert var_0 == -1


def test_case_1():
    str_0 = ":4r{:nKilJ"
    var_0 = module_1.maze_search(str_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 17
    module_1.maze_search(int_0)


def test_case_3():
    str_0 = "2"
    var_0 = module_1.maze_search(str_0)
    assert var_0 == 0


def test_case_4():
    bytes_0 = b"\xe5\xa2\xee#_RKF\xa0JRK\xe7\xdf\x83%`]"
    tuple_0 = (bytes_0,)
    var_0 = module_1.maze_search(tuple_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x01\xf8"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_1.maze_search(list_0)
    assert var_0 == -1
    deque_0 = module_0.deque()
    module_1.maze_search(deque_0)

# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.backtrack.pattern_match as module_0


def test_case_0():
    str_0 = "ADqE~_4cy\r&4>"
    var_0 = module_0.pattern_match(str_0, str_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.pattern_match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "f2S6Yp"
    list_0 = [str_0]
    var_0 = module_0.pattern_match(list_0, str_0)
    assert var_0 is True
    bool_0 = True
    module_0.pattern_match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    complex_0 = -1884.8 + 615.329064j
    str_0 = "uH\tdXyw@G('EY4t"
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        str_0: complex_0,
    }
    module_0.pattern_match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    var_0 = module_0.pattern_match(set_0, tuple_0)
    assert var_0 is False
    str_0 = "4sb"
    complex_0 = 2j
    module_0.pattern_match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "Given a linked list, remove_range function accepts a starting and ending index\nas parameters and removes the elements at those indexes (inclusive) from the list\n\nFor example:\nList: [8, 13, 17, 4, 9, 12, 98, 41, 7, 23, 0, 92]\nremove_range(list, 3, 8);\nList becomes: [8, 13, 17, 23, 0, 92]\n\nlegal range of the list (0 < start index < end index < size of list).\n"
    str_1 = "Given a linked list, remove_range function accepts a starting and ending ind x\nas parameters and removes the elements at those indexes (inclusive) from the list\n\nFor example:\nList: [8, 13, 17, 4, 9, 12, 98, 41, 7, 23, 0, 92]\nremove_range(list, 3, 8);\nList becomes: [8, 13, 17, 23, 0, 92]\n\nlegal range of th; list (0 < start index < end index < size of list).\n"
    var_0 = module_0.pattern_match(str_1, str_0)
    assert var_0 is False
    module_0.pattern_match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "Given a linked list, remove_range function accepts a starting and ending index\nas parameters and removes the elements at those indexes (inclusive) from the list\n\nFor example:\nList: [8, 13, 17, 4, 9, 12, 98, 41, 7, 23, 0, 92]\nremove_range(list, 3, 8);\nList becomes: [8, 13, 17, 23, 0, 92]\n\nlegal range of the list (0 < start index < end index < size of list).\n"
    str_1 = "Given a linked list, remove_range function accets a starting and ending ind x\nas parameters and removes the elements at those indexes (inclusive) from the list\n\nFor example:\nList: [8, 13, 17, 4, 9, 12, 98, 41, 7, 23, 0, 92]\nremove_range(list, 3, 8);\nList becomes: [8, 13, 17, 23, 0, 92]\n\nlegal range of th; list (0 < start index < end index < size of list).\n"
    var_0 = module_0.pattern_match(str_1, str_0)
    assert var_0 is False
    var_1 = module_0.pattern_match(str_1, str_0)
    assert var_1 is False
    set_0 = {var_0, str_0}
    module_0.pattern_match(var_0, set_0)

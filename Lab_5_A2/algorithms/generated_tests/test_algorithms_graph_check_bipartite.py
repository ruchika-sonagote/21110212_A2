# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.graph.check_bipartite as module_0


def test_case_0():
    str_0 = "\\6"
    var_0 = module_0.check_bipartite(str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = -749.385232
    module_0.check_bipartite(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_1: bool_1}
    list_0 = [dict_0, bool_1]
    module_0.check_bipartite(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    bytes_0 = b""
    bool_1 = False
    dict_0 = {
        bool_0: bool_0,
        bytes_0: bool_0,
        bool_0: bytes_0,
        bytes_0: bytes_0,
        bytes_0: bool_1,
        bool_1: bool_1,
    }
    list_0 = [dict_0, bool_1]
    var_0 = module_0.check_bipartite(list_0)
    assert var_0 is True
    module_0.check_bipartite(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    tuple_0 = ()
    dict_0 = {bool_0: tuple_0, bool_0: bool_0}
    str_0 = "Szk|\t)@fN\tjL:;MN\x0cm\t"
    tuple_1 = (tuple_0, dict_0, dict_0, str_0)
    bool_1 = False
    list_0 = [tuple_1, bool_0, bool_0]
    tuple_2 = (tuple_1, bool_0, bool_1, list_0)
    str_1 = ":?#."
    tuple_3 = (bool_0, tuple_2, str_1, tuple_0)
    tuple_4 = (tuple_3, tuple_2, bool_0, list_0)
    module_0.check_bipartite(tuple_4)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    tuple_0 = ()
    dict_0 = {bool_0: tuple_0, bool_0: bool_0}
    str_0 = "Szk|\t)@fN\tjL:;MN\x0cm\t"
    tuple_1 = (tuple_0, dict_0, dict_0, str_0)
    bool_1 = True
    list_0 = [tuple_1, bool_0, bool_0]
    tuple_2 = (tuple_1, bool_0, bool_1, list_0)
    str_1 = ":?#."
    tuple_3 = (bool_0, tuple_2, str_1, tuple_0)
    tuple_4 = (tuple_3, tuple_2, bool_0, list_0)
    var_0 = module_0.check_bipartite(tuple_4)
    assert var_0 is False
    none_type_0 = None
    module_0.check_bipartite(none_type_0)

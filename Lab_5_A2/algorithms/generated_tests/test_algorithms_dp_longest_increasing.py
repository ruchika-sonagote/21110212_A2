# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.dp.longest_increasing as module_0


def test_case_0():
    bytes_0 = b"|\x98"
    var_0 = module_0.longest_increasing_subsequence(bytes_0)
    assert var_0 == 2


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x13\xd0z\xa7d\xc1\xc1?\x03\x87\x00@29"
    module_0.longest_increasing_subsequence_optimized(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"T\xb5\x05\x0b,\x13\xfa"
    module_0.longest_increasing_subsequence_optimized2(bytes_0)


def test_case_3():
    tuple_0 = ()
    var_0 = module_0.longest_increasing_subsequence_optimized2(tuple_0)
    assert var_0 == 0


def test_case_4():
    bytes_0 = b"\x98"
    var_0 = module_0.longest_increasing_subsequence_optimized2(bytes_0)
    assert var_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.longest_increasing_subsequence(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'\xe6]2_\xd3\xe8\xe8\x85"'
    module_0.longest_increasing_subsequence_optimized2(bytes_0)


def test_case_7():
    bytes_0 = b"\x13\xd0z\xa7d\xc1\xc1?\x03\x87\x00@29"
    var_0 = module_0.longest_increasing_subsequence(bytes_0)
    assert var_0 == 4

# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.dfs.all_factors as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    var_0 = module_0.get_factors_iterative2(bool_0)
    var_1 = module_0.get_factors_iterative1(bool_0)
    float_0 = 275.13
    var_2 = module_0.get_factors(float_0)
    str_0 = ", 6z\\Y'+m']IIV[G"
    tuple_0 = (str_0, str_0)
    str_1 = "initial"
    dict_0 = {tuple_0: var_2}
    tuple_1 = (tuple_0, str_1, var_0, dict_0)
    module_0.get_factors(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -352
    var_0 = module_0.get_factors(int_0)
    var_1 = module_0.get_factors_iterative2(int_0)
    var_2 = module_0.get_factors_iterative1(int_0)
    var_3 = module_0.get_factors_iterative2(int_0)
    int_1 = -144
    var_4 = module_0.get_factors_iterative1(int_1)
    var_5 = module_0.get_factors_iterative1(int_0)
    module_0.get_factors_iterative1(var_3)


def test_case_2():
    bool_0 = True
    var_0 = module_0.get_factors_iterative1(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 2649
    var_0 = module_0.get_factors_iterative1(int_0)
    var_1 = module_0.get_factors_iterative2(int_0)
    int_1 = 2727
    dict_0 = {int_1: int_1, int_1: int_1}
    module_0.get_factors_iterative2(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.get_factors_iterative2(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"U\x0e]\x18\xae\xc1\x19;"
    module_0.get_factors(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 2649
    var_0 = module_0.get_factors_iterative1(int_0)
    var_1 = module_0.get_factors(int_0)
    int_1 = 2727
    dict_0 = {int_1: int_1, int_1: int_1}
    module_0.get_factors_iterative2(dict_0)


def test_case_7():
    float_0 = 561.0
    var_0 = module_0.get_factors_iterative1(float_0)

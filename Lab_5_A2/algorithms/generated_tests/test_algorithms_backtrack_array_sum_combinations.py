# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.backtrack.array_sum_combinations as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xe9\x91\xfbB\xc2\x95\xed\x86$\xc3G\xe8\xe8\xe3\xe5&\x02\xba"
    int_0 = 378
    var_0 = module_0.unique_array_sum_combinations(bytes_0, bytes_0, bytes_0, int_0)
    var_1 = module_0.array_sum_combinations(bytes_0, bytes_0, bytes_0, int_0)
    var_2 = module_0.unique_array_sum_combinations(bytes_0, bytes_0, bytes_0, bytes_0)
    module_0.array_sum_combinations(var_0, bytes_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 107
    module_0.array_sum_combinations(int_0, int_0, int_0, int_0)


def test_case_2():
    int_0 = -1751
    list_0 = [int_0]
    none_type_0 = None
    var_0 = module_0.array_sum_combinations(list_0, int_0, none_type_0, int_0)


def test_case_3():
    bytes_0 = b"\xe9\x91\xfbB\xc2\x10\xed\x86$\xc3G\xe5&\x14\xba"
    var_0 = module_0.unique_array_sum_combinations(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.array_sum_combinations(bool_0, none_type_0, bool_0, bool_0)
    set_0 = set()
    module_0.unique_array_sum_combinations(none_type_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xe9\x91\xfbB\xa9\x02\xed\x86$\xc3G\xe8\xe8\xe3\xe5&\x02\xba"
    var_0 = module_0.unique_array_sum_combinations(bytes_0, bytes_0, bytes_0, bytes_0)
    int_0 = 373
    var_1 = module_0.unique_array_sum_combinations(bytes_0, bytes_0, bytes_0, int_0)
    int_1 = 586
    var_2 = module_0.array_sum_combinations(var_0, var_0, var_0, int_1)
    bool_0 = False
    var_3 = module_0.array_sum_combinations(var_2, bool_0, bytes_0, bool_0)
    bool_1 = True
    tuple_0 = (bytes_0, bytes_0, var_1, bool_1)
    bool_2 = False
    tuple_1 = (bytes_0, var_0, tuple_0, bool_2)
    module_0.array_sum_combinations(var_3, var_2, tuple_1, var_2)

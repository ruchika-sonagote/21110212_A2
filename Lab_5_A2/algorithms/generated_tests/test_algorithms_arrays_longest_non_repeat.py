# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.arrays.longest_non_repeat as module_0


def test_case_0():
    str_0 = "\nGiven a string, check whether it is a panagram or not.\n\nA panagram is a sentence that uses every letter at least once.\n\nThe most famous example is: \"he quick brown fox jumps over the lazy dog.\n\nNote:\nA panagram in one language isn't necessarily a panagram in another. This\nmodule assumes the english language. Hence, the Finnish panagram\n'Törkylempijävongahdus' won't pass for a panagram despite being considered\na perfect panagram in its language. However, the Swedish panagram\n'Yxmördaren Julia Blomqvist på fäktning i Schweiz' will pass despite\nincluding letters not used in the english alphabet. This is because the\nSwedish alphabet only extends the Latin one.\n"
    var_0 = module_0.get_longest_non_repeat_v3(str_0)
    none_type_0 = None
    var_1 = module_0.longest_non_repeat_v2(none_type_0)
    assert var_1 == 0
    var_2 = module_0.longest_non_repeat_v1(none_type_0)
    assert var_2 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    var_0 = module_0.longest_non_repeat_v1(none_type_0)
    assert var_0 == 0
    bytes_0 = b'\n\xa50\x06\xed"\xc5\xbb\xed\xec\xb4\xab'
    var_1 = module_0.longest_non_repeat_v1(bytes_0)
    assert var_1 == 8
    none_type_1 = None
    var_2 = module_0.longest_non_repeat_v1(none_type_1)
    assert var_2 == 0
    var_3 = module_0.longest_non_repeat_v2(none_type_1)
    assert var_3 == 0
    module_0.get_longest_non_repeat_v3(var_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 1022.0
    module_0.longest_non_repeat_v2(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b'f"\xe1\t%\xd1 \xd85\xa0\x04\xd0\xac \xce[\x9d'
    var_0 = module_0.get_longest_non_repeat_v2(bytes_0)
    var_1 = module_0.get_longest_non_repeat_v2(bytes_0)
    none_type_0 = None
    var_2 = module_0.get_longest_non_repeat_v3(var_1)
    var_3 = module_0.longest_non_repeat_v1(bytes_0)
    assert var_3 == 13
    var_4 = module_0.longest_non_repeat_v2(var_0)
    assert var_4 == 2
    var_5 = module_0.get_longest_non_repeat_v1(bytes_0)
    var_6 = module_0.longest_non_repeat_v2(bytes_0)
    assert var_6 == 13
    var_7 = module_0.get_longest_non_repeat_v1(none_type_0)
    module_0.longest_non_repeat_v2(var_3)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    module_0.get_longest_non_repeat_v1(bool_0)


def test_case_5():
    str_0 = ":+/\x0cYFf"
    none_type_0 = None
    var_0 = module_0.get_longest_non_repeat_v2(none_type_0)
    var_1 = module_0.longest_non_repeat_v2(str_0)
    assert var_1 == 7


def test_case_6():
    tuple_0 = ()
    var_0 = module_0.longest_non_repeat_v2(tuple_0)
    assert var_0 == 0
    bytes_0 = b"y\xf76\x86S"
    var_1 = module_0.get_longest_non_repeat_v2(bytes_0)
    var_2 = module_0.get_longest_non_repeat_v2(tuple_0)
    var_3 = module_0.get_longest_non_repeat_v1(bytes_0)
    var_4 = module_0.get_longest_non_repeat_v3(bytes_0)


def test_case_7():
    str_0 = "\nGiven a string, check whether it is a panagram or not.\n\nA panagram is a sentence that uses every letter at least once.\n\nThe most famou9 example is: \"he quick brown fox jumps over the lazy dog.\n\nNote:\nA panagram in one language isn't necessarily a panagram in another. This\nmodule assumes the english language. Hence, the Finnish panagram\n'Törkylempijävongahdus' won't pass for a panagram despite being considered\na perfect panagram in its language. However, the Swedish panagram\n'Yxmördaren Julia Blomqvist på fäktning i Schweiz' will pass despite\nincluding letters not used in the english alphabet. This is because the\nSwedish alphabet only extends the Latin one.\n"
    var_0 = module_0.longest_non_repeat_v2(str_0)
    assert var_0 == 24
    var_1 = module_0.get_longest_non_repeat_v3(str_0)
    none_type_0 = None
    var_2 = module_0.longest_non_repeat_v2(none_type_0)
    assert var_2 == 0
    var_3 = module_0.longest_non_repeat_v2(none_type_0)
    assert var_3 == 0


def test_case_8():
    bytes_0 = b'f"\xe1\t%\xd1 \xd85\xa0\x04\xd0\xac \xce[\x9d'
    var_0 = module_0.get_longest_non_repeat_v2(bytes_0)
    var_1 = module_0.get_longest_non_repeat_v2(bytes_0)
    var_2 = module_0.get_longest_non_repeat_v3(var_1)
    var_3 = module_0.longest_non_repeat_v1(bytes_0)
    assert var_3 == 13
    var_4 = module_0.get_longest_non_repeat_v1(bytes_0)
    var_5 = module_0.get_longest_non_repeat_v3(var_1)
    var_6 = module_0.get_longest_non_repeat_v2(var_1)
    var_7 = module_0.longest_non_repeat_v2(var_5)
    assert var_7 == 2
    var_8 = module_0.get_longest_non_repeat_v3(bytes_0)


def test_case_9():
    bytes_0 = b'f"\xe1\t%\xd1 \xd85\xa0\x04\xd0\xac \xce[\x9d'
    var_0 = module_0.get_longest_non_repeat_v2(bytes_0)
    var_1 = module_0.get_longest_non_repeat_v2(bytes_0)
    var_2 = module_0.get_longest_non_repeat_v3(var_0)
    none_type_0 = None
    var_3 = module_0.get_longest_non_repeat_v3(var_1)
    var_4 = module_0.get_longest_non_repeat_v3(var_3)
    var_5 = module_0.longest_non_repeat_v1(none_type_0)
    assert var_5 == 0
    var_6 = module_0.get_longest_non_repeat_v1(var_4)
    var_7 = module_0.get_longest_non_repeat_v3(var_1)
    var_8 = module_0.longest_non_repeat_v1(bytes_0)
    assert var_8 == 13


@pytest.mark.xfail(strict=True)
def test_case_10():
    list_0 = []
    var_0 = module_0.get_longest_non_repeat_v3(list_0)
    bytes_0 = b"z\xcbn\xc57l\xe2\xae\x8c5\x99\x0b\xec\xcb7\xc5\xd0f"
    var_1 = module_0.get_longest_non_repeat_v2(bytes_0)
    var_2 = module_0.get_longest_non_repeat_v1(bytes_0)
    var_3 = module_0.longest_non_repeat_v1(var_2)
    assert var_3 == 2
    var_4 = module_0.longest_non_repeat_v1(list_0)
    assert var_4 == 0
    none_type_0 = None
    var_5 = module_0.get_longest_non_repeat_v2(none_type_0)
    var_6 = module_0.get_longest_non_repeat_v1(var_5)
    module_0.get_longest_non_repeat_v3(none_type_0)

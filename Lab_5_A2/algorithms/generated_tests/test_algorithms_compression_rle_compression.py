# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.compression.rle_compression as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -98
    module_0.encode_rle(int_0)


def test_case_1():
    bool_0 = False
    var_0 = module_0.encode_rle(bool_0)
    assert var_0 == ""
    var_1 = module_0.encode_rle(bool_0)
    assert var_1 == ""


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "CM"
    module_0.decode_rle(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.encode_rle(none_type_0)
    assert var_0 == ""
    var_1 = module_0.decode_rle(var_0)
    assert var_1 == ""
    module_0.decode_rle(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    bool_0 = True
    bool_1 = True
    tuple_1 = (tuple_0, bool_0, bool_1)
    module_0.encode_rle(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ".\r;eA\t<UJ3\x0cI"
    var_0 = module_0.encode_rle(str_0)
    assert var_0 == "1.1\r1;1e1A1\t1<1U1J131\x0c1I"
    var_1 = module_0.decode_rle(var_0)
    assert (
        var_1
        == ".\r;eA\t<UJ\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0cI"
    )
    bool_0 = True
    module_0.decode_rle(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "nX.$\n_B"
    var_0 = module_0.encode_rle(str_0)
    assert var_0 == "1n1X1.1$1\n1_1B"
    module_0.decode_rle(str_0)

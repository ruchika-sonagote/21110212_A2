# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.automata.dfa as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    set_0 = set()
    var_0 = module_0.DFA(set_0, set_0, set_0, set_0)
    bytes_0 = b"}\x8d~"
    module_0.DFA(var_0, bytes_0, set_0, bytes_0)


def test_case_1():
    set_0 = set()
    var_0 = module_0.DFA(set_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    bytes_0 = b"n\xd1U\xb5\tQ)A\xe6\x1fY\xc1\x06\xb7\xbc}"
    var_0 = module_0.DFA(bytes_0, bytes_0, bytes_0, set_0)
    assert var_0 is False
    module_0.DFA(bytes_0, set_0, set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    tuple_0 = (list_0, list_0)
    var_0 = module_0.DFA(list_0, list_0, tuple_0, list_0)
    assert var_0 is True
    module_0.DFA(tuple_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    set_0 = set()
    var_0 = module_0.DFA(set_0, set_0, set_0, set_0)
    str_0 = "Ux(wA"
    tuple_0 = (var_0, var_0, var_0, var_0)
    module_0.DFA(str_0, var_0, str_0, tuple_0)

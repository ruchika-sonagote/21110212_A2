# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.backtrack.add_operators as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\x96\xf3\x03xd\xe0ya"
    module_0.add_operators(bytes_0, bytes_0)


def test_case_1():
    bool_0 = False
    str_0 = "76"
    list_0 = module_0.add_operators(bool_0, bool_0)
    var_0 = module_0.add_operators(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "2JKIm^u{y4DCw"
    module_0.add_operators(str_0, str_0)


def test_case_3():
    str_0 = "76"
    var_0 = module_0.add_operators(str_0, str_0)


def test_case_4():
    bool_0 = True
    str_0 = "76"
    var_0 = module_0.add_operators(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    var_0 = module_0.add_operators(tuple_0, tuple_0)
    var_1 = module_0.add_operators(var_0, var_0)
    bool_0 = False
    var_2 = module_0.add_operators(var_0, var_0)
    str_0 = "06"
    var_3 = module_0.add_operators(str_0, tuple_0)
    object_0 = module_1.object()
    var_4 = module_0.add_operators(var_1, tuple_0)
    var_5 = module_0.add_operators(str_0, bool_0)
    var_6 = module_0.add_operators(str_0, object_0)
    object_1 = module_1.object()
    module_0.add_operators(object_0, var_3)

# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.arrays.top_1 as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\x8d\x97\x99,w\x1bL\x9f&\xd3\x98\xb6MWN\xec81\xd2\x91"
    float_0 = 728.913546
    tuple_0 = (bytes_0, float_0)
    var_0 = module_0.top_1(tuple_0)
    tuple_1 = (var_0,)
    module_0.top_1(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_0.top_1(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "\nWrite a function that takes an unsigned integer and\nreturns the number of '1' bits it has\n(also known as the Hamming weight).\n\nFor example, the 32-bit integer '11' has binary\nrepresentation 00000000000000000000000000001011,\nso the function should return 3.\n\nT(n)- O(k)   : k is the number of 1s present in binary representation.\nNOTE: this complexity is better than O(log n).\ne.g. for n = 00010100000000000000000000000000\nonly 2 iterations are required.\n\nNumber of loops is\nequal to the number of 1s in the binary representation."
    bool_0 = False
    list_0 = [str_0, str_0, bool_0, str_0]
    var_0 = module_0.top_1(list_0)
    var_1 = module_0.top_1(var_0)
    bool_1 = False
    module_0.top_1(bool_1)


def test_case_3():
    bytes_0 = b"[Mi"
    var_0 = module_0.top_1(bytes_0)
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    var_1 = module_0.top_1(var_0)
    var_2 = module_0.top_1(tuple_0)
    var_3 = module_0.top_1(bytes_0)
    var_4 = module_0.top_1(var_2)

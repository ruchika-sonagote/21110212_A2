# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.graph.maximum_flow as module_0


def test_case_0():
    bytes_0 = b"\x03\x02'\xeeX\xa6\x06b\xe6H\\\x86\xc6"
    var_0 = module_0.dfs(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)
    assert var_0 == 9223372036854775808


def test_case_1():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    var_0 = module_0.ford_fulkerson(tuple_0, bool_0, none_type_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x03\x02'\xeeX\xa6\x06bH\\\x86\xc6"
    module_0.edmonds_karp(bytes_0, bytes_0, bytes_0)


def test_case_3():
    bytes_0 = b"\x03\x02'\xeeX\xa6\x06b\xe6H\\\x86\xc6"
    var_0 = module_0.dinic_dfs(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)
    assert var_0 == 9223372036854775808


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -938
    none_type_0 = None
    module_0.dinic_dfs(
        none_type_0, none_type_0, none_type_0, none_type_0, int_0, int_0, int_0
    )


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x03\x02'\xeeX\xa6\x06b\xe6\\\x86\xc6"
    module_0.dinic(bytes_0, bytes_0, bytes_0)


def test_case_6():
    bytes_0 = b"\x03\x02'\xeeX\xa6\x06b\xe6H\\\x86\xc6"
    bool_0 = False
    var_0 = module_0.edmonds_karp(bytes_0, bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.edmonds_karp(tuple_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -938
    bytes_0 = b"\x03\x02'\xeeX\xa6\x06b\xe6H\\\x86\xc6"
    bool_0 = False
    module_0.edmonds_karp(bytes_0, bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\xcf\x8cmh\xa1J\x12:\xbdUh\xedJP'U"
    bool_0 = True
    module_0.dinic(bytes_0, bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\xcf\x8cmh\xa1J\x12:\xbdUh\xedJP'U"
    bool_0 = False
    module_0.dinic(bytes_0, bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\x03\x02'\xeeX\xa6\x06b\xe6H\\\x86\xc6"
    bool_0 = True
    module_0.ford_fulkerson(bytes_0, bool_0, bytes_0)


def test_case_12():
    bytes_0 = b"\x9c.l"
    bool_0 = True
    var_0 = module_0.edmonds_karp(bytes_0, bool_0, bool_0)
    assert var_0 == 0
    none_type_0 = None
    var_1 = module_0.dinic_dfs(
        bytes_0, bool_0, none_type_0, bool_0, none_type_0, bytes_0
    )
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.dinic(tuple_0, bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = -938
    bytes_0 = b"\x03\x02'\xeeX\xa6\x06b\xe6H\\\x86\xc6"
    bool_0 = False
    module_0.dinic_dfs(bytes_0, bool_0, int_0, bool_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = False
    int_0 = 3278
    list_0 = [bool_0, int_0, int_0]
    var_0 = module_0.dinic_dfs(list_0, int_0, list_0, bool_0, int_0, list_0)
    assert var_0 == 0
    int_1 = 9223372036854775808
    bool_1 = True
    module_0.edmonds_karp(bool_1, int_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b"e\x8c\xfb\xa6\x97v\xb0\xfe\xd2\xf7"
    bool_0 = False
    list_0 = [bytes_0, bool_0, bool_0]
    none_type_0 = None
    module_0.edmonds_karp(list_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    int_0 = 9223372036854775736
    var_0 = module_0.dfs(int_0, int_0, int_0, int_0, int_0, int_0)
    assert var_0 == 9223372036854775808
    bytes_0 = b"\x18\xa6\xc9}\xb35\x1e"
    bool_0 = False
    list_0 = [
        bytes_0,
        var_0,
        bool_0,
        bytes_0,
        bytes_0,
        var_0,
        bytes_0,
        int_0,
        int_0,
        bool_0,
        bytes_0,
        var_0,
        bytes_0,
        bytes_0,
        var_0,
        bytes_0,
        bytes_0,
        bytes_0,
        bytes_0,
        bytes_0,
        bytes_0,
        bytes_0,
    ]
    var_1 = module_0.dinic_dfs(list_0, list_0, list_0, bool_0, list_0, bytes_0, list_0)
    assert var_1 == 0
    var_2 = module_0.edmonds_karp(bytes_0, bool_0, bool_0)
    assert var_2 == 0
    module_0.dinic(list_0, var_2, bool_0)

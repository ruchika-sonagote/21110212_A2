# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.dp.num_decodings as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "emUWVf59M\\"
    module_0.num_decodings(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    var_0 = module_0.num_decodings(bool_0)
    assert var_0 == 0
    int_0 = -573
    module_0.num_decodings(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "emUWVf59M\\"
    module_0.num_decodings2(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.num_decodings2(bool_0)
    assert var_0 == 0
    int_0 = -573
    module_0.num_decodings(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = " 56"
    var_0 = module_0.num_decodings2(str_0)
    assert var_0 == 1
    var_1 = module_0.num_decodings(str_0)
    assert var_1 == 2
    var_2 = module_0.num_decodings(str_0)
    assert var_2 == 2
    module_0.num_decodings2(var_2)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "5 *c8xAc@"
    module_0.num_decodings(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "0"
    none_type_0 = None
    var_0 = module_0.num_decodings(none_type_0)
    assert var_0 == 0
    var_1 = module_0.num_decodings(str_0)
    assert var_1 == 0
    list_0 = []
    none_type_1 = None
    var_2 = module_0.num_decodings(var_0)
    assert var_2 == 0
    var_3 = module_0.num_decodings(var_2)
    var_4 = module_0.num_decodings(list_0)
    var_5 = module_0.num_decodings2(none_type_1)
    assert var_5 == 0
    var_6 = module_0.num_decodings2(var_4)
    assert var_6 == 0
    var_7 = module_0.num_decodings2(list_0)
    assert var_7 == 0
    var_8 = module_0.num_decodings2(none_type_1)
    assert var_8 == 0
    var_9 = module_0.num_decodings(var_4)
    var_10 = module_0.num_decodings(var_8)
    assert var_10 == 0
    var_11 = module_0.num_decodings(var_4)
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.num_decodings2(list_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "0"
    var_0 = module_0.num_decodings2(str_0)
    assert var_0 == 0
    none_type_0 = None
    var_1 = module_0.num_decodings(none_type_0)
    assert var_1 == 0
    var_2 = module_0.num_decodings(str_0)
    assert var_2 == 0
    list_0 = []
    none_type_1 = None
    var_3 = module_0.num_decodings(var_1)
    assert var_3 == 0
    var_4 = module_0.num_decodings(var_3)
    var_5 = module_0.num_decodings(list_0)
    var_6 = module_0.num_decodings2(none_type_1)
    assert var_6 == 0
    var_7 = module_0.num_decodings2(var_5)
    assert var_7 == 0
    var_8 = module_0.num_decodings2(list_0)
    assert var_8 == 0
    var_9 = module_0.num_decodings2(none_type_1)
    assert var_9 == 0
    var_10 = module_0.num_decodings(var_5)
    var_11 = module_0.num_decodings(var_9)
    assert var_11 == 0
    var_12 = module_0.num_decodings(var_5)
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.num_decodings2(list_1)


def test_case_8():
    str_0 = " 0"
    var_0 = module_0.num_decodings2(str_0)
    assert var_0 == 1


def test_case_9():
    str_0 = " 56"
    var_0 = module_0.num_decodings2(str_0)
    assert var_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "5 *c8xAc@"
    module_0.num_decodings2(str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "x0v+*Ht"
    var_0 = module_0.num_decodings2(str_0)
    assert var_0 == 0
    module_0.num_decodings(str_0)


def test_case_12():
    str_0 = "x0v+*Ht"
    var_0 = module_0.num_decodings2(str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    var_0 = module_0.num_decodings(bool_0)
    assert var_0 == 0
    var_1 = module_0.num_decodings(bool_0)
    assert var_1 == 0
    none_type_0 = None
    var_2 = module_0.num_decodings(none_type_0)
    assert var_2 == 0
    var_3 = module_0.num_decodings2(var_2)
    assert var_3 == 0
    var_4 = module_0.num_decodings(none_type_0)
    str_0 = " 16"
    var_5 = module_1.object()
    var_6 = module_0.num_decodings2(var_3)
    assert var_6 == 0
    var_7 = module_0.num_decodings(var_4)
    var_8 = module_0.num_decodings(var_7)
    var_9 = module_0.num_decodings(bool_0)
    var_10 = module_0.num_decodings2(str_0)
    assert var_10 == 2
    var_11 = module_0.num_decodings2(var_1)
    var_12 = module_0.num_decodings2(var_7)
    var_13 = module_0.num_decodings(var_4)
    var_14 = module_0.num_decodings(var_6)
    module_0.num_decodings(var_10)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    var_0 = module_0.num_decodings2(none_type_0)
    assert var_0 == 0
    var_1 = module_0.num_decodings(none_type_0)
    assert var_1 == 0
    str_0 = "{0:0%db}"
    var_2 = module_0.num_decodings2(str_0)
    assert var_2 == 0
    var_3 = module_0.num_decodings(var_1)
    assert var_3 == 0
    str_1 = " 506"
    var_4 = module_0.num_decodings(var_2)
    assert var_4 == 0
    var_5 = module_0.num_decodings(var_4)
    var_6 = module_0.num_decodings(var_0)
    assert var_6 == 0
    bytes_0 = b"LMT\x86\x90=\x04\x1a\x97Y\xc3\xff2,\xc7"
    var_7 = module_0.num_decodings(str_1)
    assert var_7 == 0
    var_8 = module_0.num_decodings2(var_4)
    var_9 = module_0.num_decodings(var_3)
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    var_0 = module_0.num_decodings2(none_type_0)
    assert var_0 == 0
    var_1 = module_0.num_decodings(none_type_0)
    assert var_1 == 0
    str_0 = "\t00db#"
    var_2 = module_0.num_decodings2(str_0)
    assert var_2 == 0
    module_1.object(**var_2)

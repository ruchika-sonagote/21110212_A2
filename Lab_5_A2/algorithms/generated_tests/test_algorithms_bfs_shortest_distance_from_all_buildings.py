# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.bfs.shortest_distance_from_all_buildings as module_0
import collections as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xca\xe3\xdbA\x9d\xe1\xdb@"
    module_0.shortest_distance(bytes_0)


def test_case_1():
    bytes_0 = b""
    var_0 = module_0.shortest_distance(bytes_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    module_0.bfs(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)


def test_case_3():
    float_0 = -3315.0
    var_0 = module_0.bfs(float_0, float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    module_0.bfs(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_5():
    str_0 = "R;wM'Hi\"\x0cgo]9crCoiG"
    var_0 = module_0.shortest_distance(str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_0.shortest_distance(none_type_0)
    assert var_0 == -1
    str_0 = "\rVM[cZe%5"
    var_1 = str_0.__repr__()
    none_type_1 = None
    list_0 = [none_type_1, none_type_1, none_type_1]
    int_0 = 597
    var_2 = module_0.shortest_distance(list_0)
    assert var_2 == -1
    list_1 = []
    none_type_2 = None
    module_0.bfs(int_0, list_1, none_type_2, none_type_2, none_type_2)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    user_string_0 = module_1.UserString(none_type_0)
    bool_0 = True
    module_0.bfs(user_string_0, none_type_0, bool_0, bool_0, none_type_0)


def test_case_8():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    var_0 = module_0.shortest_distance(list_1)
    assert var_0 == -1
